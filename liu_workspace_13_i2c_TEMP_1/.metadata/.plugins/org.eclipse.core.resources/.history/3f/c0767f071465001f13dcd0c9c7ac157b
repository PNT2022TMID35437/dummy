
/*******************************************************************************
 * (c) Copyright 2014 Microsemi Corporation.  All rights reserved.
 *
 * This example program demonstrates the use of the Core I2C driver for master
 * and Slave functions. It configures I2C0 as master and I2C1 as Slave.
 * It provides a UART command line interface allowing the user to select the I2C
 * transaction type to perform and the parameters to use for the transaction.
 * I2C0 SDA pin is connected to I2C1 SDA and I2C0 SCL pin is connected to I2C1 SCL
 * for testing this example Project. 
 *
 * SVN $Revision: 8038 $
 * SVN $Date: 2015-10-15 17:44:08 +0530 (Thu, 15 Oct 2015) $
 */

#include "drivers/corei2c/core_i2c.h"
#include "drivers/mss_uart/mss_uart.h"
#include "drivers_config/sys_config/sys_config.h"
#include "mss_i2c.h"
#include <stdint.h>



#define COREI2C_0    0x30000000



i2c_instance_t g_core_i2c0;



#define Temp_I2C_ADDRESS 0x4E
#define INA226_I2C_ADDRESS 0X40




#define INA226_REG_CALIBRATION 0x05


void I2C_Init(void) {
   I2C_init(&g_core_i2c0,COREI2C_0, 0x4E,I2C_PCLK_DIV_256);
}

void MSS_I2C_Init(void) {
   MSS_I2C_init(&g_mss_i2c1, 0x40,MSS_I2C_PCLK_DIV_256);
}
uint8_t Temp_Read_Register(uint8_t reg, uint32_t* value) {

	    uint8_t data[1]={0};


	    I2C_write_read(
	        &g_core_i2c0,
			Temp_I2C_ADDRESS,
	        &reg,
	        1,
	        data,
	        sizeof(data),
	        I2C_RELEASE_BUS
	    );
	    i2c_status_t status=I2C_wait_complete(&g_core_i2c0,I2C_NO_TIMEOUT);
	    status=I2C_get_status(&g_core_i2c0);

	    if (status == I2C_SUCCESS) {
	        *value = data[0];
	        return 1;
	    }
	    else
	    {
	        return 0;
	    }
	}

uint8_t Temp_write_Register(uint8_t reg, uint16_t value) {
	uint8_t dataa[2];
	     dataa[0]=reg;

	    dataa[1]=value;


	    I2C_write(
	        &g_core_i2c0,
			Temp_I2C_ADDRESS,
	       dataa,
	        sizeof(dataa),
	        I2C_RELEASE_BUS
	    );
	    i2c_status_t status=I2C_wait_complete(&g_core_i2c0,I2C_NO_TIMEOUT);
	    status=I2C_get_status(&g_core_i2c0);

	    if (status == I2C_SUCCESS) {

	        return 1;
	    }
	    else
	    {
	        return 0;
	    }
	}


uint8_t INA226_ReadRegister16(uint8_t reg, uint32_t *value) {
    uint8_t data[2]={0,0};
    uint8_t returned_value_0;

    MSS_I2C_write_read(
        &g_mss_i2c1,
        INA226_I2C_ADDRESS,
        &reg,
        1,
        data,
        sizeof(data),
        MSS_I2C_RELEASE_BUS
  );

    mss_i2c_status_t status =MSS_I2C_wait_complete(&g_mss_i2c1,0);
    status=MSS_I2C_get_status(&g_mss_i2c1);

    if (status == MSS_I2C_SUCCESS) {
        *value = (data[0] << 8) | data[1];  // Combine 3 bytes into a 24-bit value
        return 1;  // Success
    } else {
        return 0;  // Failure
    }
}
uint8_t INA226_WriteRegister(uint8_t reg, uint16_t value) {
    uint8_t data[3];
    uint8_t a;
    data[0] = reg;
    data[1] = (value >> 8);
    data[2] = value & 0xFF;

    MSS_I2C_write(
        &g_mss_i2c1,
        INA226_I2C_ADDRESS,
        data,
        sizeof(data),
        MSS_I2C_RELEASE_BUS
    );
    mss_i2c_status_t status=MSS_I2C_wait_complete(&g_mss_i2c1,0);

    status=MSS_I2C_get_status(&g_mss_i2c1);
    return (status == MSS_I2C_SUCCESS) ? 1 : 0;
}


uint32_t Temperature_Cal(){
	uint32_t temp_value=0;
	uint32_t HIGH_value=0;
	uint32_t LOW_value=0;

	   Temp_Read_Register(0x00,&temp_value);

	   Temp_Read_Register(0x02,&HIGH_value);
	   Temp_write_Register(0x02,0x28);
	   Temp_Read_Register(0x02,&HIGH_value);

	   	   Temp_Read_Register(0x03,&LOW_value);
	   	   Temp_write_Register(0x03,0x23);
	   	   Temp_Read_Register(0x03,&LOW_value);


}
uint32_t Current_Cal()
{
	 	uint32_t shunt_volt_value;
	    uint8_t write_buf[2];
	    uint32_t config_value,cal_val;
	    uint32_t current_val=0;
	    uint8_t b=0;
	INA226_ReadRegister16(0x00,&config_value);

    INA226_ReadRegister16(0x01, &shunt_volt_value);

    INA226_ReadRegister16(0x05,&cal_val);
    b=INA226_WriteRegister(0x05, 0x3E);

    INA226_ReadRegister16(0x05,&cal_val);
    INA226_ReadRegister16(0x04,&current_val);

    return current_val;
}
int main(void)
{
   uint32_t temp_value=0;
   uint32_t value_cur=0;
   I2C_Init();
   MSS_I2C_Init();

   value_cur=Current_Cal();

   Temp_Read_Register(0x00,&temp_value);
   Temp_Read_Register(0x02,&temp_value);
   Temp_write_Register(0x02,0x28);
   Temp_Read_Register(0x02,&temp_value);


   while (1)
   {

   }

   return 0;
}



void FabricIrq0_IRQHandler(void)
{
    I2C_isr(&g_core_i2c0);
}

//void FabricIrq1_IRQHandler(void)
//{
//    I2C_isr(&g_core_i2c1);
//}
