#include <stdint.h>

#define I2C_BASE_ADDR 0x30000000U  // Replace with your I2C core's base address

// I2C Register Offsets
#define I2C_CTRL_REG      (*(volatile uint32_t *)(I2C_BASE_ADDR + 0x00))
#define I2C_STATUS_REG    (*(volatile uint32_t *)(I2C_BASE_ADDR + 0x04))
#define I2C_TX_REG        (*(volatile uint32_t *)(I2C_BASE_ADDR + 0x08))
#define I2C_RX_REG        (*(volatile uint32_t *)(I2C_BASE_ADDR + 0x0C))
#define I2C_CMD_REG       (*(volatile uint32_t *)(I2C_BASE_ADDR + 0x10))

// I2C Commands
#define I2C_CMD_START     0x01
#define I2C_CMD_STOP      0x02
#define I2C_CMD_READ      0x04
#define I2C_CMD_WRITE     0x08

// Function to initialize I2C core
void i2c_init(void) {
    // Set up control register (e.g., clock rate, enable core)
    I2C_CTRL_REG = 0x00000001; // Example setting, configure as needed
}

// Function to read a register from an I2C slave
uint8_t i2c_read_register(uint8_t slave_addr, uint8_t reg_addr) {
    uint8_t data;

    // Send start condition and slave address with write
    I2C_CMD_REG = I2C_CMD_START;
    I2C_TX_REG = slave_addr; // Slave address for write operation
    I2C_CMD_REG = I2C_CMD_WRITE;
    while (I2C_STATUS_REG & 0x01); // Wait for the write to complete

    // Send register address
    I2C_TX_REG = reg_addr;
    I2C_CMD_REG = I2C_CMD_WRITE;
    while (I2C_STATUS_REG & 0x01); // Wait for the write to complete

    // Restart and send slave address with read bit
    I2C_CMD_REG = I2C_CMD_START;
    I2C_TX_REG = slave_addr | 0x01; // Slave address with read operation
    I2C_CMD_REG = I2C_CMD_WRITE;
    while (I2C_STATUS_REG & 0x01); // Wait for the address to be acknowledged

    // Read the data from the register
    I2C_CMD_REG = I2C_CMD_READ;
    while (I2C_STATUS_REG & 0x01); // Wait until data is ready
    data = I2C_RX_REG;

    // Send stop condition
    I2C_CMD_REG = I2C_CMD_STOP;

    return data;
}

int main() {
    i2c_init();

    // Read register 0x00 from slave 0x4E
    uint8_t reg_data = i2c_read_register(0x4E, 0x02);

    // Main application loop
    while (1) {
        // Use reg_data as needed
    }

    return 0;
}
