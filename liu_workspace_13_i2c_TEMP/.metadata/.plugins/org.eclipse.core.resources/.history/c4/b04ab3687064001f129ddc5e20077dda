#include <stdint.h>

#define I2C_BASE_ADDR 0x30000000  // Your I2C core's base address

// I2C Register Offsets
#define I2C_CTRL_REG      (*(volatile uint32_t *)(I2C_BASE_ADDR + 0x00)) // Control register
#define I2C_STATUS_REG    (*(volatile uint32_t *)(I2C_BASE_ADDR + 0x04)) // Status register
#define I2C_TX_REG        (*(volatile uint32_t *)(I2C_BASE_ADDR + 0x08)) // Transmit/Address register
#define I2C_RX_REG        (*(volatile uint32_t *)(I2C_BASE_ADDR + 0x0C)) // Receive register
#define I2C_CMD_REG       (*(volatile uint32_t *)(I2C_BASE_ADDR + 0x10)) // Command register

// I2C Control Bits
#define I2C_ENS1          (1 << 6) // Enable I2C core
#define I2C_STA           (1 << 5) // Generate START condition
#define I2C_SI            (1 << 4) // Interrupt flag (SI)

// I2C Status Codes
#define I2C_STATUS_START_SENT     0x08 // START condition transmitted
#define I2C_STATUS_ADDR_ACK       0x18 // SLA+W transmitted, ACK received
#define I2C_STATUS_ADDR_NACK      0x20 // SLA+W transmitted, NACK received

// Function to initialize I2C core
void i2c_init(void) {
    I2C_CTRL_REG = I2C_ENS1; // Enable I2C core
}

// Function to read a register from an I2C slave
uint8_t i2c_read_register(uint8_t slave_addr, uint8_t reg_addr) {
    uint8_t data;

    // Send start condition
    I2C_CTRL_REG |= I2C_STA; // Set STA and ENS1
    while (!(I2C_STATUS_REG == I2C_STATUS_START_SENT)); // Wait for START to be sent

    // Send slave address with write bit (0)
    I2C_TX_REG = slave_addr << 1; // 7-bit address with write bit (0)
    I2C_CTRL_REG &= ~I2C_STA; // Clear STA bit to continue transfer
    while (!(I2C_CTRL_REG & I2C_SI)); // Wait for interrupt

    // Check if ACK was received
    if (I2C_STATUS_REG == I2C_STATUS_ADDR_ACK) {
        // Send register address
        I2C_TX_REG = reg_addr;
        I2C_CTRL_REG &= ~I2C_SI; // Clear SI to continue transfer
        while (!(I2C_CTRL_REG & I2C_SI)); // Wait for interrupt

        // Send repeated START condition for read operation
        I2C_CTRL_REG |= I2C_STA; // Set STA again for repeated start
        while (!(I2C_STATUS_REG == I2C_STATUS_START_SENT)); // Wait for repeated START

        // Send slave address with read bit (1)
        I2C_TX_REG = (slave_addr << 1) | 0x01; // 7-bit address with read bit (1)
        I2C_CTRL_REG &= ~I2C_STA; // Clear STA bit to continue transfer
        while (!(I2C_CTRL_REG & I2C_SI)); // Wait for interrupt

        // Check if ACK was received
        if (I2C_STATUS_REG == I2C_STATUS_ADDR_ACK) {
            I2C_CTRL_REG &= ~I2C_SI; // Clear SI for the read command
            while (!(I2C_CTRL_REG & I2C_SI)); // Wait for data

            // Read data from the receive register
            data = I2C_RX_REG;
        }
    }

    // Send stop condition
    I2C_CTRL_REG |= I2C_CMD_REG; // Send STOP condition

    return data;
}

int main() {
    i2c_init();

    // Read register 0x00 from slave 0x4E
    uint8_t reg_data = i2c_read_register(0x4E, 0x00);

    // Main application loop
    while (1) {
        // Use reg_data as needed
    }

    return 0;
}
