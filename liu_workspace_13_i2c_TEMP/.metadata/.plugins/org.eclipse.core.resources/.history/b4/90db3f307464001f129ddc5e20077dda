/*******************************************************************************
 * (c) Copyright 2009-2018 Microsemi SoC Products Group.  All rights reserved.
 * 
 * CoreI2C driver interrupt control.
 * 
 * SVN $Revision: 9749 $
 * SVN $Date: 2018-02-12 18:26:37 +0530 (Mon, 12 Feb 2018) $
 */
#include "hal.h"
#include "hal_assert.h"
#include "core_i2c.h"
#define I2C_BASE_ADDR      0x30000000 // Base address for I2C peripheral

// Example register offsets for CoreI2C
#define I2C_CTRL_REG       (*(volatile uint32_t *)(I2C_BASE_ADDR + 0x00))
#define I2C_STATUS_REG     (*(volatile uint32_t *)(I2C_BASE_ADDR + 0x04))
#define I2C_TX_REG         (*(volatile uint32_t *)(I2C_BASE_ADDR + 0x08))
#define I2C_RX_REG         (*(volatile uint32_t *)(I2C_BASE_ADDR + 0x0C))
#define I2C_CMD_REG        (*(volatile uint32_t *)(I2C_BASE_ADDR + 0x10))
#define I2C_INT_MASK_REG   (*(volatile uint32_t *)(I2C_BASE_ADDR + 0x14)) // Example offset for interrupt mask register
#define I2C_INT_STATUS_REG (*(volatile uint32_t *)(I2C_BASE_ADDR + 0x18)) // Example offset for interrupt status register
/*------------------------------------------------------------------------------
 * This function must be modified to enable interrupts generated from the
 * CoreI2C instance identified as parameter.
 */
void I2C_enable_irq(i2c_instance_t *this_i2c) {
    // Ensure that the provided instance is valid
    if (this_i2c == 0) {
        HAL_ASSERT(0); // Handle invalid instance
        return;
    }

    // Enable the relevant I2C interrupts
    // Example: Enable TX Ready, RX Ready, and Error interrupts
    I2C_set_interrupt_mask(this_i2c, I2C_INT_TX_READY | I2C_INT_RX_READY | I2C_INT_ERROR);

    // Optionally, enable the global interrupt for I2C in the NVIC
    NVIC_EnableIRQ(I2C_IRQn); // Replace I2C_IRQn with the actual interrupt number
}

// Function to set the interrupt mask for CoreI2C (assuming such a function exists)
void I2C_set_interrupt_mask(i2c_instance_t *this_i2c, uint32_t interrupt_mask) {
    // Example: Set the interrupt mask in the I2C peripheral register
    // This is a placeholder function; you need to use the actual function provided by your driver
    this_i2c->INT_MASK_REG = interrupt_mask;
}

/*------------------------------------------------------------------------------
 * This function must be modified to disable interrupts generated from the
 * CoreI2C instance identified as parameter.
 */
void I2C_disable_irq( i2c_instance_t * this_i2c )
{
    HAL_ASSERT(0)
}
