#include <stdint.h>

#define I2C_BASE_ADDR      0x30000000 // Base address for I2C peripheral

// I2C Register Offsets
#define I2C_CTRL_REG       (*(volatile uint32_t *)(I2C_BASE_ADDR + 0x00))
#define I2C_STATUS_REG     (*(volatile uint32_t *)(I2C_BASE_ADDR + 0x04))
#define I2C_TX_REG         (*(volatile uint32_t *)(I2C_BASE_ADDR + 0x08))
#define I2C_RX_REG         (*(volatile uint32_t *)(I2C_BASE_ADDR + 0x0C))
#define I2C_CMD_REG        (*(volatile uint32_t *)(I2C_BASE_ADDR + 0x10))

// I2C Commands
#define I2C_CMD_START      (1 << 0)
#define I2C_CMD_STOP       (1 << 1)
#define I2C_CMD_WRITE      (1 << 2)
#define I2C_CMD_READ       (1 << 3)

// Status Register Flags
#define I2C_STATUS_TX_READY (1 << 0)
#define I2C_STATUS_RX_READY (1 << 1)

// Function to initialize I2C peripheral
void i2c_init(void) {
    // Configure control register (example: clock speed and enable I2C)
    I2C_CTRL_REG = (1 << 0) | (0x01 << 1); // Example configuration
}

// Function to read a register from an I2C slave
uint8_t i2c_read_register(uint8_t slave_addr, uint8_t reg_addr) {
    uint8_t data;

    // Send Start condition
    I2C_CMD_REG = I2C_CMD_START;
    //while (!(I2C_STATUS_REG & I2C_STATUS_TX_READY)); // Wait for the bus to be ready

    // Send Slave Address with Write bit
    I2C_TX_REG = slave_addr & ~0x01; // Clear the read bit
    I2C_CMD_REG = I2C_CMD_WRITE;
    while (!(I2C_STATUS_REG & I2C_STATUS_TX_READY)); // Wait until address transmission is complete

    // Send Register Address
    I2C_TX_REG = reg_addr;
    I2C_CMD_REG = I2C_CMD_WRITE;
    while (!(I2C_STATUS_REG & I2C_STATUS_TX_READY)); // Wait until register address transmission is complete

    // Send Repeated Start condition
    I2C_CMD_REG = I2C_CMD_START;
    while (!(I2C_STATUS_REG & I2C_STATUS_TX_READY)); // Wait for the bus to be ready

    // Send Slave Address with Read bit
    I2C_TX_REG = slave_addr | 0x01; // Set the read bit
    I2C_CMD_REG = I2C_CMD_WRITE;
    while (!(I2C_STATUS_REG & I2C_STATUS_TX_READY)); // Wait until address transmission is complete

    // Read Data
    I2C_CMD_REG = I2C_CMD_READ;
    while (!(I2C_STATUS_REG & I2C_STATUS_RX_READY)); // Wait until data is received
    data = I2C_RX_REG;

    // Send Stop condition
    I2C_CMD_REG = I2C_CMD_STOP;

    return data;
}

int main(void) {
    // Initialize the I2C peripheral
    i2c_init();

    // Read register 0x00 from slave device with address 0x4E
    uint8_t reg_data = i2c_read_register(0x4E, 0x00);

    // Main application loop
    while (1) {
        // Use reg_data as needed
    }

    return 0;
}
