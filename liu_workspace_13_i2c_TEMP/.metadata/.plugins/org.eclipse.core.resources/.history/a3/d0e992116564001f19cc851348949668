#include <stdint.h>

#define I2C_BASE_ADDR 0x30000000  // Replace with your I2C core's base address

// I2C Register Offsets
#define I2C_CTRL_REG      (*(volatile uint32_t *)(I2C_BASE_ADDR + 0x00))
#define I2C_STATUS_REG    (*(volatile uint32_t *)(I2C_BASE_ADDR + 0x04))
#define I2C_TX_REG        (*(volatile uint32_t *)(I2C_BASE_ADDR + 0x08))
#define I2C_RX_REG        (*(volatile uint32_t *)(I2C_BASE_ADDR + 0x0C))
#define I2C_CMD_REG       (*(volatile uint32_t *)(I2C_BASE_ADDR + 0x10))

// I2C Commands
#define I2C_CMD_START     0x01
#define I2C_CMD_STOP      0x02
#define I2C_CMD_READ      0x04
#define I2C_CMD_WRITE     0x08

// Function to initialize I2C core
void i2c_init(void) {
    // Set up control register (e.g., clock rate, enable core)
    I2C_CTRL_REG = 0x00000001; // Example setting, configure as needed
}

// Function to send data over I2C
void i2c_write(uint8_t slave_addr, uint8_t *data, uint32_t length) {
    I2C_CMD_REG = I2C_CMD_START; // Send start condition
    I2C_TX_REG = slave_addr;     // Send slave address

    for (uint32_t i = 0; i < length; i++) {
        I2C_TX_REG = data[i];    // Write data
        I2C_CMD_REG = I2C_CMD_WRITE;
        while (I2C_STATUS_REG & 0x01); // Wait until transfer completes
    }

    I2C_CMD_REG = I2C_CMD_STOP; // Send stop condition
}

// Function to read data from I2C
void i2c_read(uint8_t slave_addr, uint8_t *data, uint32_t length) {
    I2C_CMD_REG = I2C_CMD_START; // Send start condition
    I2C_TX_REG = slave_addr | 0x01; // Send slave address with read bit

    for (uint32_t i = 0; i < length; i++) {
        I2C_CMD_REG = I2C_CMD_READ;
        while (I2C_STATUS_REG & 0x01); // Wait until data is ready
        data[i] = I2C_RX_REG;          // Read received data
    }

    I2C_CMD_REG = I2C_CMD_STOP; // Send stop condition
}

int main() {
    i2c_init();

//    uint8_t write_data[] = {0x12, 0x34, 0x56};
//    i2c_write(0x50, write_data, sizeof(write_data));

    uint8_t read_data[3];
    i2c_read(0x4E, read_data, sizeof(read_data));

    while (1) {
        // Application loop
    }
    return 0;
}
