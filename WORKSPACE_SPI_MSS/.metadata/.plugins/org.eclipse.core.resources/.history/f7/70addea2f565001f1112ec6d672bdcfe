/*******************************************************************************
 * (c) Copyright 2008-2015 Microsemi SoC Products Group.  All rights reserved.
 * 
 * This example project demonstrates communications with an external flash
 * device.
 *
 * Please refer to the file README.txt for further details about this example.
 *
 * SVN $Revision: 7721 $
 * SVN $Date: 2015-09-01 19:35:23 +0530 (Tue, 01 Sep 2015) $
 */
#include "drivers/mss_pdma/mss_pdma.h"
#include "drivers/mss_spi/mss_spi.h"
#include "drivers/w25q64fvssig/w25q64fvssig.h"
#include "drivers/mss_gpio/mss_gpio.h"
#include "mss_uart.h"
#include "core_gpio.h"

#define BUFFER_A_SIZE   3000

/* Manufacture and device IDs for Winbond Electronics W25Q64FVSSIG SPI Flash. */
#define FLASH_MANUFACTURER_ID   (uint8_t)0xEF
#define FLASH_DEVICE_ID         (uint8_t)0x16


mss_uart_instance_t * const gp_my_uart = &g_mss_uart0;
gpio_instance_t g_gpio;


/*
 * Static global variables
 */
static uint8_t g_flash_wr_buf[6332]={0x00, 0x90, 0x00, 0x20, 0x09, 0x07, 0x00, 0x08, 0xAD, 0x06, 0x00, 0x08, 0xB3, 0x06, 0x00, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB9, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xC3, 0x06, 0x00, 0x08, 0xCD, 0x06, 0x00, 0x08, 0x59, 0x07, 0x00, 0x08,
		0x59, 0x07, 0x00, 0x08, 0x59, 0x07, 0x00, 0x08, 0x59, 0x07, 0x00, 0x08, 0x59, 0x07, 0x00, 0x08,
		0x59, 0x07, 0x00, 0x08, 0x59, 0x07, 0x00, 0x08, 0xDB, 0x06, 0x00, 0x08, 0x59, 0x07, 0x00, 0x08,
		0x59, 0x07, 0x00, 0x08, 0x59, 0x07, 0x00, 0x08, 0x59, 0x07, 0x00, 0x08, 0x59, 0x07, 0x00, 0x08,
		0x59, 0x07, 0x00, 0x08, 0x59, 0x07, 0x00, 0x08, 0x59, 0x07, 0x00, 0x08, 0x59, 0x07, 0x00, 0x08,
		0x59, 0x07, 0x00, 0x08, 0x59, 0x07, 0x00, 0x08, 0x59, 0x07, 0x00, 0x08, 0x59, 0x07, 0x00, 0x08,
		0x59, 0x07, 0x00, 0x08, 0x59, 0x07, 0x00, 0x08, 0x59, 0x07, 0x00, 0x08, 0x59, 0x07, 0x00, 0x08,
		0x59, 0x07, 0x00, 0x08, 0x59, 0x07, 0x00, 0x08, 0x59, 0x07, 0x00, 0x08, 0x10, 0xB5, 0x06, 0x4C,
		0x23, 0x78, 0x00, 0x2B, 0x07, 0xD1, 0x05, 0x4B, 0x00, 0x2B, 0x02, 0xD0, 0x04, 0x48, 0x00, 0xE0,
		0x00, 0xBF, 0x01, 0x23, 0x23, 0x70, 0x10, 0xBD, 0x18, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,
		0x44, 0x18, 0x00, 0x08, 0x04, 0x4B, 0x10, 0xB5, 0x00, 0x2B, 0x03, 0xD0, 0x03, 0x49, 0x04, 0x48,
		0x00, 0xE0, 0x00, 0xBF, 0x10, 0xBD, 0xC0, 0x46, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x20,
		0x44, 0x18, 0x00, 0x08, 0x00, 0x22, 0x43, 0x08, 0x8B, 0x42, 0x74, 0xD3, 0x03, 0x09, 0x8B, 0x42,
		0x5F, 0xD3, 0x03, 0x0A, 0x8B, 0x42, 0x44, 0xD3, 0x03, 0x0B, 0x8B, 0x42, 0x28, 0xD3, 0x03, 0x0C,
		0x8B, 0x42, 0x0D, 0xD3, 0xFF, 0x22, 0x09, 0x02, 0x12, 0xBA, 0x03, 0x0C, 0x8B, 0x42, 0x02, 0xD3,
		0x12, 0x12, 0x09, 0x02, 0x65, 0xD0, 0x03, 0x0B, 0x8B, 0x42, 0x19, 0xD3, 0x00, 0xE0, 0x09, 0x0A,
		0xC3, 0x0B, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 0x03, 0xC0, 0x1A, 0x52, 0x41, 0x83, 0x0B, 0x8B, 0x42,
		0x01, 0xD3, 0x8B, 0x03, 0xC0, 0x1A, 0x52, 0x41, 0x43, 0x0B, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x03,
		0xC0, 0x1A, 0x52, 0x41, 0x03, 0x0B, 0x8B, 0x42, 0x01, 0xD3, 0x0B, 0x03, 0xC0, 0x1A, 0x52, 0x41,
		0xC3, 0x0A, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 0x02, 0xC0, 0x1A, 0x52, 0x41, 0x83, 0x0A, 0x8B, 0x42,
		0x01, 0xD3, 0x8B, 0x02, 0xC0, 0x1A, 0x52, 0x41, 0x43, 0x0A, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x02,
		0xC0, 0x1A, 0x52, 0x41, 0x03, 0x0A, 0x8B, 0x42, 0x01, 0xD3, 0x0B, 0x02, 0xC0, 0x1A, 0x52, 0x41,
		0xC3, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 0x01, 0xC0, 0x1A, 0x52, 0x41, 0x83, 0x09, 0x8B, 0x42,
		0x01, 0xD3, 0x8B, 0x01, 0xC0, 0x1A, 0x52, 0x41, 0x43, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x01,
		0xC0, 0x1A, 0x52, 0x41, 0x03, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0x0B, 0x01, 0xC0, 0x1A, 0x52, 0x41,
		0xC3, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 0x00, 0xC0, 0x1A, 0x52, 0x41, 0x83, 0x08, 0x8B, 0x42,
		0x01, 0xD3, 0x8B, 0x00, 0xC0, 0x1A, 0x52, 0x41, 0x43, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x00,
		0xC0, 0x1A, 0x52, 0x41, 0x03, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0x0B, 0x00, 0xC0, 0x1A, 0x52, 0x41,
		0x00, 0x22, 0x43, 0x08, 0x8B, 0x42, 0x74, 0xD3, 0x03, 0x09, 0x8B, 0x42, 0x5F, 0xD3, 0x03, 0x0A,
		0x8B, 0x42, 0x44, 0xD3, 0x03, 0x0B, 0x8B, 0x42, 0x28, 0xD3, 0x03, 0x0C, 0x8B, 0x42, 0x0D, 0xD3,
		0xFF, 0x22, 0x09, 0x02, 0x12, 0xBA, 0x03, 0x0C, 0x8B, 0x42, 0x02, 0xD3, 0x12, 0x12, 0x09, 0x02,
		0x65, 0xD0, 0x03, 0x0B, 0x8B, 0x42, 0x19, 0xD3, 0x00, 0xE0, 0x09, 0x0A, 0xC3, 0x0B, 0x8B, 0x42,
		0x01, 0xD3, 0xCB, 0x03, 0xC0, 0x1A, 0x52, 0x41, 0x83, 0x0B, 0x8B, 0x42, 0x01, 0xD3, 0x8B, 0x03,
		0xC0, 0x1A, 0x52, 0x41, 0x43, 0x0B, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x03, 0xC0, 0x1A, 0x52, 0x41,
		0x03, 0x0B, 0x8B, 0x42, 0x01, 0xD3, 0x0B, 0x03, 0xC0, 0x1A, 0x52, 0x41, 0xC3, 0x0A, 0x8B, 0x42,
		0x01, 0xD3, 0xCB, 0x02, 0xC0, 0x1A, 0x52, 0x41, 0x83, 0x0A, 0x8B, 0x42, 0x01, 0xD3, 0x8B, 0x02,
		0xC0, 0x1A, 0x52, 0x41, 0x43, 0x0A, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x02, 0xC0, 0x1A, 0x52, 0x41,
		0x03, 0x0A, 0x8B, 0x42, 0x01, 0xD3, 0x0B, 0x02, 0xC0, 0x1A, 0x52, 0x41, 0xC3, 0x09, 0x8B, 0x42,
		0x01, 0xD3, 0xCB, 0x01, 0xC0, 0x1A, 0x52, 0x41, 0x83, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0x8B, 0x01,
		0xC0, 0x1A, 0x52, 0x41, 0x43, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x01, 0xC0, 0x1A, 0x52, 0x41,
		0x03, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0x0B, 0x01, 0xC0, 0x1A, 0x52, 0x41, 0xC3, 0x08, 0x8B, 0x42,
		0x01, 0xD3, 0xCB, 0x00, 0xC0, 0x1A, 0x52, 0x41, 0x83, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0x8B, 0x00,
		0xC0, 0x1A, 0x52, 0x41, 0x43, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x00, 0xC0, 0x1A, 0x52, 0x41,
		0x03, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0x0B, 0x00, 0xC0, 0x1A, 0x52, 0x41, 0x00, 0x22, 0x43, 0x08,
		0x8B, 0x42, 0x74, 0xD3, 0x03, 0x09, 0x8B, 0x42, 0x5F, 0xD3, 0x03, 0x0A, 0x8B, 0x42, 0x44, 0xD3,
		0x03, 0x0B, 0x8B, 0x42, 0x28, 0xD3, 0x03, 0x0C, 0x8B, 0x42, 0x0D, 0xD3, 0xFF, 0x22, 0x09, 0x02,
		0x12, 0xBA, 0x03, 0x0C, 0x8B, 0x42, 0x02, 0xD3, 0x12, 0x12, 0x09, 0x02, 0x65, 0xD0, 0x03, 0x0B,
		0x8B, 0x42, 0x19, 0xD3, 0x00, 0xE0, 0x09, 0x0A, 0xC3, 0x0B, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 0x03,
		0xC0, 0x1A, 0x52, 0x41, 0x83, 0x0B, 0x8B, 0x42, 0x01, 0xD3, 0x8B, 0x03, 0xC0, 0x1A, 0x52, 0x41,
		0x43, 0x0B, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x03, 0xC0, 0x1A, 0x52, 0x41, 0x03, 0x0B, 0x8B, 0x42,
		0x01, 0xD3, 0x0B, 0x03, 0xC0, 0x1A, 0x52, 0x41, 0xC3, 0x0A, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 0x02,
		0xC0, 0x1A, 0x52, 0x41, 0x83, 0x0A, 0x8B, 0x42, 0x01, 0xD3, 0x8B, 0x02, 0xC0, 0x1A, 0x52, 0x41,
		0x43, 0x0A, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x02, 0xC0, 0x1A, 0x52, 0x41, 0x03, 0x0A, 0x8B, 0x42,
		0x01, 0xD3, 0x0B, 0x02, 0xC0, 0x1A, 0x52, 0x41, 0xC3, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 0x01,
		0xC0, 0x1A, 0x52, 0x41, 0x83, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0x8B, 0x01, 0xC0, 0x1A, 0x52, 0x41,
		0x43, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x01, 0xC0, 0x1A, 0x52, 0x41, 0x03, 0x09, 0x8B, 0x42,
		0x01, 0xD3, 0x0B, 0x01, 0xC0, 0x1A, 0x52, 0x41, 0xC3, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 0x00,
		0xC0, 0x1A, 0x52, 0x41, 0x83, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0x8B, 0x00, 0xC0, 0x1A, 0x52, 0x41,
		0x43, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x00, 0xC0, 0x1A, 0x52, 0x41, 0x03, 0x08, 0x8B, 0x42,
		0x01, 0xD3, 0x0B, 0x00, 0xC0, 0x1A, 0x52, 0x41, 0x00, 0x22, 0x43, 0x08, 0x8B, 0x42, 0x74, 0xD3,
		0x03, 0x09, 0x8B, 0x42, 0x5F, 0xD3, 0x03, 0x0A, 0x8B, 0x42, 0x44, 0xD3, 0x03, 0x0B, 0x8B, 0x42,
		0x28, 0xD3, 0x03, 0x0C, 0x8B, 0x42, 0x0D, 0xD3, 0xFF, 0x22, 0x09, 0x02, 0x12, 0xBA, 0x03, 0x0C,
		0x8B, 0x42, 0x02, 0xD3, 0x12, 0x12, 0x09, 0x02, 0x65, 0xD0, 0x03, 0x0B, 0x8B, 0x42, 0x19, 0xD3,
		0x00, 0xE0, 0x09, 0x0A, 0xC3, 0x0B, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 0x03, 0xC0, 0x1A, 0x52, 0x41,
		0x83, 0x0B, 0x8B, 0x42, 0x01, 0xD3, 0x8B, 0x03, 0xC0, 0x1A, 0x52, 0x41, 0x43, 0x0B, 0x8B, 0x42,
		0x01, 0xD3, 0x4B, 0x03, 0xC0, 0x1A, 0x52, 0x41, 0x03, 0x0B, 0x8B, 0x42, 0x01, 0xD3, 0x0B, 0x03,
		0xC0, 0x1A, 0x52, 0x41, 0xC3, 0x0A, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 0x02, 0xC0, 0x1A, 0x52, 0x41,
		0x83, 0x0A, 0x8B, 0x42, 0x01, 0xD3, 0x8B, 0x02, 0xC0, 0x1A, 0x52, 0x41, 0x43, 0x0A, 0x8B, 0x42,
		0x01, 0xD3, 0x4B, 0x02, 0xC0, 0x1A, 0x52, 0x41, 0x03, 0x0A, 0x8B, 0x42, 0x01, 0xD3, 0x0B, 0x02,
		0xC0, 0x1A, 0x52, 0x41, 0xC3, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 0x01, 0xC0, 0x1A, 0x52, 0x41,
		0x83, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0x8B, 0x01, 0xC0, 0x1A, 0x52, 0x41, 0x43, 0x09, 0x8B, 0x42,
		0x01, 0xD3, 0x4B, 0x01, 0xC0, 0x1A, 0x52, 0x41, 0x03, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0x0B, 0x01,
		0xC0, 0x1A, 0x52, 0x41, 0xC3, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 0x00, 0xC0, 0x1A, 0x52, 0x41,
		0x83, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0x8B, 0x00, 0xC0, 0x1A, 0x52, 0x41, 0x43, 0x08, 0x8B, 0x42,
		0x01, 0xD3, 0x4B, 0x00, 0xC0, 0x1A, 0x52, 0x41, 0x03, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0x0B, 0x00,
		0xC0, 0x1A, 0x52, 0x41, 0x00, 0x22, 0x43, 0x08, 0x8B, 0x42, 0x74, 0xD3, 0x03, 0x09, 0x8B, 0x42,
		0x5F, 0xD3, 0x03, 0x0A, 0x8B, 0x42, 0x44, 0xD3, 0x03, 0x0B, 0x8B, 0x42, 0x28, 0xD3, 0x03, 0x0C,
		0x8B, 0x42, 0x0D, 0xD3, 0xFF, 0x22, 0x09, 0x02, 0x12, 0xBA, 0x03, 0x0C, 0x8B, 0x42, 0x02, 0xD3,
		0x12, 0x12, 0x09, 0x02, 0x65, 0xD0, 0x03, 0x0B, 0x8B, 0x42, 0x19, 0xD3, 0x00, 0xE0, 0x09, 0x0A,
		0xC3, 0x0B, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 0x03, 0xC0, 0x1A, 0x52, 0x41, 0x83, 0x0B, 0x8B, 0x42,
		0x01, 0xD3, 0x8B, 0x03, 0xC0, 0x1A, 0x52, 0x41, 0x43, 0x0B, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x03,
		0xC0, 0x1A, 0x52, 0x41, 0x03, 0x0B, 0x8B, 0x42, 0x01, 0xD3, 0x0B, 0x03, 0xC0, 0x1A, 0x52, 0x41,
		0xC3, 0x0A, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 0x02, 0xC0, 0x1A, 0x52, 0x41, 0x83, 0x0A, 0x8B, 0x42,
		0x01, 0xD3, 0x8B, 0x02, 0xC0, 0x1A, 0x52, 0x41, 0x43, 0x0A, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x02,
		0xC0, 0x1A, 0x52, 0x41, 0x03, 0x0A, 0x8B, 0x42, 0x01, 0xD3, 0x0B, 0x02, 0xC0, 0x1A, 0x52, 0x41,
		0xC3, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 0x01, 0xC0, 0x1A, 0x52, 0x41, 0x83, 0x09, 0x8B, 0x42,
		0x01, 0xD3, 0x8B, 0x01, 0xC0, 0x1A, 0x52, 0x41, 0x43, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x01,
		0xC0, 0x1A, 0x52, 0x41, 0x03, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0x0B, 0x01, 0xC0, 0x1A, 0x52, 0x41,
		0xC3, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 0x00, 0xC0, 0x1A, 0x52, 0x41, 0x83, 0x08, 0x8B, 0x42,
		0x01, 0xD3, 0x8B, 0x00, 0xC0, 0x1A, 0x52, 0x41, 0x43, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x00,
		0xC0, 0x1A, 0x52, 0x41, 0x03, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0x0B, 0x00, 0xC0, 0x1A, 0x52, 0x41,
		0x00, 0x22, 0x43, 0x08, 0x8B, 0x42, 0x74, 0xD3, 0x03, 0x09, 0x8B, 0x42, 0x5F, 0xD3, 0x03, 0x0A,
		0x8B, 0x42, 0x44, 0xD3, 0x03, 0x0B, 0x8B, 0x42, 0x28, 0xD3, 0x03, 0x0C, 0x8B, 0x42, 0x0D, 0xD3,
		0xFF, 0x22, 0x09, 0x02, 0x12, 0xBA, 0x03, 0x0C, 0x8B, 0x42, 0x02, 0xD3, 0x12, 0x12, 0x09, 0x02,
		0x65, 0xD0, 0x03, 0x0B, 0x8B, 0x42, 0x19, 0xD3, 0x00, 0xE0, 0x09, 0x0A, 0xC3, 0x0B, 0x8B, 0x42,
		0x01, 0xD3, 0xCB, 0x03, 0xC0, 0x1A, 0x52, 0x41, 0x83, 0x0B, 0x8B, 0x42, 0x01, 0xD3, 0x8B, 0x03,
		0xC0, 0x1A, 0x52, 0x41, 0x43, 0x0B, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x03, 0xC0, 0x1A, 0x52, 0x41,
		0x03, 0x0B, 0x8B, 0x42, 0x01, 0xD3, 0x0B, 0x03, 0xC0, 0x1A, 0x52, 0x41, 0xC3, 0x0A, 0x8B, 0x42,
		0x01, 0xD3, 0xCB, 0x02, 0xC0, 0x1A, 0x52, 0x41, 0x83, 0x0A, 0x8B, 0x42, 0x01, 0xD3, 0x8B, 0x02,
		0xC0, 0x1A, 0x52, 0x41, 0x43, 0x0A, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x02, 0xC0, 0x1A, 0x52, 0x41,
		0x03, 0x0A, 0x8B, 0x42, 0x01, 0xD3, 0x0B, 0x02, 0xC0, 0x1A, 0x52, 0x41, 0xC3, 0x09, 0x8B, 0x42,
		0x01, 0xD3, 0xCB, 0x01, 0xC0, 0x1A, 0x52, 0x41, 0x83, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0x8B, 0x01,
		0xC0, 0x1A, 0x52, 0x41, 0x43, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x01, 0xC0, 0x1A, 0x52, 0x41,
		0x03, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0x0B, 0x01, 0xC0, 0x1A, 0x52, 0x41, 0xC3, 0x08, 0x8B, 0x42,
		0x01, 0xD3, 0xCB, 0x00, 0xC0, 0x1A, 0x52, 0x41, 0x83, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0x8B, 0x00,
		0xC0, 0x1A, 0x52, 0x41, 0x43, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x00, 0xC0, 0x1A, 0x52, 0x41,
		0x03, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0x0B, 0x00, 0xC0, 0x1A, 0x52, 0x41, 0x00, 0x22, 0x43, 0x08,
		0x8B, 0x42, 0x74, 0xD3, 0x03, 0x09, 0x8B, 0x42, 0x5F, 0xD3, 0x03, 0x0A, 0x8B, 0x42, 0x44, 0xD3,
		0x03, 0x0B, 0x8B, 0x42, 0x28, 0xD3, 0x03, 0x0C, 0x8B, 0x42, 0x0D, 0xD3, 0xFF, 0x22, 0x09, 0x02,
		0x12, 0xBA, 0x03, 0x0C, 0x8B, 0x42, 0x02, 0xD3, 0x12, 0x12, 0x09, 0x02, 0x65, 0xD0, 0x03, 0x0B,
		0x8B, 0x42, 0x19, 0xD3, 0x00, 0xE0, 0x09, 0x0A, 0xC3, 0x0B, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 0x03,
		0xC0, 0x1A, 0x52, 0x41, 0x83, 0x0B, 0x8B, 0x42, 0x01, 0xD3, 0x8B, 0x03, 0xC0, 0x1A, 0x52, 0x41,
		0x43, 0x0B, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x03, 0xC0, 0x1A, 0x52, 0x41, 0x03, 0x0B, 0x8B, 0x42,
		0x01, 0xD3, 0x0B, 0x03, 0xC0, 0x1A, 0x52, 0x41, 0xC3, 0x0A, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 0x02,
		0xC0, 0x1A, 0x52, 0x41, 0x83, 0x0A, 0x8B, 0x42, 0x01, 0xD3, 0x8B, 0x02, 0xC0, 0x1A, 0x52, 0x41,
		0x43, 0x0A, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x02, 0xC0, 0x1A, 0x52, 0x41, 0x03, 0x0A, 0x8B, 0x42,
		0x01, 0xD3, 0x0B, 0x02, 0xC0, 0x1A, 0x52, 0x41, 0xC3, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 0x01,
		0xC0, 0x1A, 0x52, 0x41, 0x83, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0x8B, 0x01, 0xC0, 0x1A, 0x52, 0x41,
		0x43, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x01, 0xC0, 0x1A, 0x52, 0x41, 0x03, 0x09, 0x8B, 0x42,
		0x01, 0xD3, 0x0B, 0x01, 0xC0, 0x1A, 0x52, 0x41, 0xC3, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 0x00,
		0xC0, 0x1A, 0x52, 0x41, 0x83, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0x8B, 0x00, 0xC0, 0x1A, 0x52, 0x41,
		0x43, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x00, 0xC0, 0x1A, 0x52, 0x41, 0x03, 0x08, 0x8B, 0x42,
		0x01, 0xD3, 0x0B, 0x00, 0xC0, 0x1A, 0x52, 0x41};
//static uint8_t g_flash_rd_buf[6332];

/* Local Function. */
static uint8_t verify_write(uint8_t* write_buff, uint8_t* read_buff, uint16_t size);

/***************************************************************************//**
 * main function.
 */
int main()
{
	static uint8_t g_flash_rd_buf[6332];
    volatile uint32_t errors = 0;
    uint32_t address = 0;
//    uint16_t loop_count;
    uint8_t manufacturer_id = 0;
    uint8_t device_id = 0;
    
    /* Disable Watchdog */
    SYSREG->WDOG_CR = 0x00000000;
    GPIO_init( &g_gpio, 0x30000000, GPIO_APB_32_BITS_BUS );

    MSS_UART_init(gp_my_uart,
                      MSS_UART_115200_BAUD,
                      MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT);
    MSS_UART_polled_tx_string(gp_my_uart, const uint8_t*("Hello"));


    GPIO_config( &g_gpio, GPIO_0, GPIO_OUTPUT_MODE );


    /*--------------------------------------------------------------------------
     * Initialize the write and read Buffers
    */
//    for(loop_count = 0; loop_count < (BUFFER_A_SIZE/2); loop_count++)
//    {
//        g_flash_wr_buf[loop_count] = 0x44 + loop_count;
//        g_flash_rd_buf[loop_count] = 0x00;
//    }
//    for(loop_count = (BUFFER_A_SIZE/2); loop_count < BUFFER_A_SIZE; loop_count++)
//    {
//        g_flash_wr_buf[loop_count] = 0x33;
//        g_flash_rd_buf[loop_count] = 0x00;
//    }

    /* Initializing GPIO to control RESET and WP pin of SPI Flash.*/
//    GPIO_init();
//    MSS_GPIO_config(MSS_GPIO_0 , MSS_GPIO_OUTPUT_MODE);
//    MSS_GPIO_config(MSS_GPIO_1 , MSS_GPIO_OUTPUT_MODE);
//
//    /*Keep USB PHY out of Reset*/
//    MSS_GPIO_set_output(MSS_GPIO_0 , 1);
//    MSS_GPIO_set_output(MSS_GPIO_1 , 1);

    /*--------------------------------------------------------------------------
     * Flash Driver Initialization
    */

    GPIO_set_output(&g_gpio,GPIO_0,0);

    FLASH_init();

    FLASH_global_unprotect();

    FLASH_erase_4k_block(0x0DD00000);
    FLASH_erase_4k_block(0x0DE00000);
    /*--------------------------------------------------------------------------
     * Check SPI Flash part manufacturer and device ID.
    */
    FLASH_read_device_id(&manufacturer_id, &device_id);
    if ((manufacturer_id != FLASH_MANUFACTURER_ID) || (device_id != FLASH_DEVICE_ID))
    {
        ++errors;
    }
    /*--------------------------------------------------------------------------
     * Write Data to Flash.
    */
    address =0x0DD00000;
    FLASH_program(address, g_flash_wr_buf, sizeof(g_flash_wr_buf));

    /*--------------------------------------------------------------------------
     * Read Data From Flash.
    */
    address = 0x0DD00000;
    FLASH_read(address, g_flash_rd_buf, sizeof(g_flash_wr_buf));
    
    errors = verify_write(g_flash_rd_buf, g_flash_wr_buf, sizeof(g_flash_wr_buf));

    MSS_UART_polled_tx(gp_my_uart, g_flash_rd_buf, 10);
      
    while(1)
    {




    }
}

/***************************************************************************//**
 * Read the date from SPI FLASH and compare the same with write buffer.
 */
static uint8_t verify_write(uint8_t* write_buff, uint8_t* read_buff, uint16_t size)
{
    uint8_t error = 0;
    uint16_t index = 0;
    
    while(size != 0)
    {
        if(write_buff[index] != read_buff[index])
        {
            error = 1;
            break;
        }
        index++;
        size--;
    }
    
    return error;
}

