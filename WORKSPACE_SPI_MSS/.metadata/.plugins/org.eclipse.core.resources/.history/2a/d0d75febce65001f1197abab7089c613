/*******************************************************************************
 * (c) Copyright 2008-2015 Microsemi SoC Products Group.  All rights reserved.
 * 
 * This example project demonstrates communications with an external flash
 * device.
 *
 * Please refer to the file README.txt for further details about this example.
 *
 * SVN $Revision: 7721 $
 * SVN $Date: 2015-09-01 19:35:23 +0530 (Tue, 01 Sep 2015) $
 */
#include "drivers/mss_pdma/mss_pdma.h"
#include "drivers/mss_spi/mss_spi.h"
#include "drivers/w25q64fvssig/w25q64fvssig.h"
#include "drivers/mss_gpio/mss_gpio.h"
#define BUFFER_A_SIZE   3000

/* Manufacture and device IDs for Winbond Electronics W25Q64FVSSIG SPI Flash. */
#define FLASH_MANUFACTURER_ID   (uint8_t)0xEF
#define FLASH_DEVICE_ID         (uint8_t)0x16

/*
 * Static global variables
 */
static uint8_t g_flash_wr_buf[BUFFER_A_SIZE];
static uint8_t g_flash_rd_buf[BUFFER_A_SIZE];

/* Local Function. */
static uint8_t verify_write(uint8_t* write_buff, uint8_t* read_buff, uint16_t size);

/***************************************************************************//**
 * main function.
 */
int main()
{
    volatile uint32_t errors = 0;
    uint32_t address = 0;
    uint16_t loop_count;
    uint8_t manufacturer_id = 0;
    uint8_t device_id = 0;
    
    /* Disable Watchdog */
    SYSREG->WDOG_CR = 0x00000000;

    /*--------------------------------------------------------------------------
     * Initialize the write and read Buffers
    */
    for(loop_count = 0; loop_count < (BUFFER_A_SIZE/2); loop_count++)
    {
        g_flash_wr_buf[loop_count] = 0x44 + loop_count;
        g_flash_rd_buf[loop_count] = 0x00;
    }
    for(loop_count = (BUFFER_A_SIZE/2); loop_count < BUFFER_A_SIZE; loop_count++)
    {
        g_flash_wr_buf[loop_count] = 0x33;
        g_flash_rd_buf[loop_count] = 0x00;
    }

    /* Initializing GPIO to control RESET and WP pin of SPI Flash.*/
    MSS_GPIO_init();
    MSS_GPIO_config(MSS_GPIO_0 , MSS_GPIO_OUTPUT_MODE);
    MSS_GPIO_config(MSS_GPIO_1 , MSS_GPIO_OUTPUT_MODE);

    /*Keep USB PHY out of Reset*/
    MSS_GPIO_set_output(MSS_GPIO_0 , 1);
    MSS_GPIO_set_output(MSS_GPIO_1 , 1);
    
    /*--------------------------------------------------------------------------
     * Flash Driver Initialization
    */
    FLASH_init();

    FLASH_global_unprotect();

    FLASH_erase_4k_block(0);

    /*--------------------------------------------------------------------------
     * Check SPI Flash part manufacturer and device ID.
    */
    FLASH_read_device_id(&manufacturer_id, &device_id);
    if ((manufacturer_id != FLASH_MANUFACTURER_ID) || (device_id != FLASH_DEVICE_ID))
    {
        ++errors;
    }
    /*--------------------------------------------------------------------------
     * Write Data to Flash.
    */
    address = 200;
    FLASH_program(address, g_flash_wr_buf, sizeof(g_flash_wr_buf));

    /*--------------------------------------------------------------------------
     * Read Data From Flash.
    */
    address = 200;
    FLASH_read(address, g_flash_rd_buf, sizeof(g_flash_wr_buf));
    
    errors = verify_write(g_flash_rd_buf, g_flash_wr_buf, sizeof(g_flash_wr_buf));
      
    while(1)
    {
        ;
    }
}

/***************************************************************************//**
 * Read the date from SPI FLASH and compare the same with write buffer.
 */
static uint8_t verify_write(uint8_t* write_buff, uint8_t* read_buff, uint16_t size)
{
    uint8_t error = 0;
    uint16_t index = 0;
    
    while(size != 0)
    {
        if(write_buff[index] != read_buff[index])
        {
            error = 1;
            break;
        }
        index++;
        size--;
    }
    
    return error;
}

