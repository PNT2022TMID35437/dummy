================================================================================
                     SmartFusion2 MSS I2C Master/Slave example
================================================================================

This example project demonstrates the use of the MSS I2C peripherals in a 
SmartFusion2 Eval Kit system. It demonstrates reading and writing data
between a pair of MSS I2Cs configured as a master and a slave.

The operation of the MSS I2Cs is controlled via a serial console.

--------------------------------------------------------------------------------
                            How to use this example
--------------------------------------------------------------------------------
Connect the IO pins for the SDA and SCL of the two MSS I2Cs together using the
jumper settings described below.

Connect a serial cable between the SmartFusion2 Eval Kit and the PC and use your
serial terminal software of choice, configured for 57600bps, no parity and one
stop bit, to exercise the CoreI2Cs via the provided menu system. 

Use menu option 1 to write between 0 and 32 bytes of data from the master I2C
device to the slave I2C device. Any data received by the slave is written to
the slave_tx_buffer[] array and overwrites some or all of the default contents 
- "<<-------Slave Tx data ------->>". 0 byte transfers are allowed with this
option but not with option 3 below.

Use menu option 2 to read the 32 bytes of data from the Slave I2C 
slave_tx_buffer[] via I2C and display it on the console.

Use menu option 3 to write between 1 and 32 bytes of data to the slave and read
it back in the same operation (uses repeat start between read and write). 

Use menu option 4 to terminate the demo.

To demonstrate the error detection and time out features of the driver, follow
these steps:

1. Error: Disconnect the SDA line by removing the flying lead between H1 pin 7 
   and H1 pin 11. Attempt to write some data to the slave via menu option 1 and
   observe the "Data Write Failed!" message.
   
2. Time out: Connect the flying lead removed from H1 pin 11 in the previous step 
   to gnd. Attempt to write some data to the slave via menu option 1 and observe
   the "Data Write Timed Out!" message after 3 seconds.
   
--------------------------------------------------------------------------------
                                Target hardware
--------------------------------------------------------------------------------
This example project is targeted at a SmartFusion2 Eval Kit with the 2 MSS I2C 
peripherals and MSS MMUART 1 enabled .

The CPU clock in the example is 100MHz, the APB clocks are 50MHz.

It is a good idea to set the drive current for the I2C I/O to the maximum
allowed so that the fall time for the I2C pins is minimised. This will help to
improve the reliability of the I2C communications.
 
The following jumper settings are required on the SmartFusion2 Eval Kit board. 
Please check your design if you have a different revision of the board.

 1. Connect H1 pin 7 to H1 pin 11 via a flying lead (SDA 0 to SDA 1). 
 2. Connect H1 pin 6 to H1 pin 10 via a flying lead (SCL 0 to SCL 1).

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                          Silicon revision dependencies
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
This example is built to execute on an M2S090 die. You will need to overwrite 
this example project's "drivers_config/sys_config" and "CMSIS" folders with the 
one generated by Libero for your hardware design if using a newer silicon 
revision.
The "drivers_config/sys_config" folder contains information about your hardware
design. This information is used by the CMSIS to initialize clock frequencies
global variables which are used by the SmartFusion2 drivers to derive baud
rates. The CMSIS boot code may also complete the device's clock configuration
depending on silicon version. The "CMSIS" and "drivers_config/sys_config" for
your design can be found in the "firmware" folder of your Libero design.
